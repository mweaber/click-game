{"version":3,"sources":["pictures.js","components/NavBar.js","components/ScoreBoard.js","components/Cards.js","components/GameRegion.js","components/GamerGrid.js","App.js","serviceWorker.js","index.js"],"names":["photos","id","name","url","clicked","NavBar","react_default","a","createElement","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","ScoreBoard","props","currentScore","newScore","Cards","alt","this","picture","src","onClick","firstClick","bind","Component","GameRegion","_this","map","components_Cards","key","GamerGrid","components_GameRegion","App","state","setState","sort","Math","random","pic","pic2","console","log","components_NavBar","components_ScoreBoard","components_GamerGrid","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c39dcc24.chunk.js","sourcesContent":["const photos = [\r\n\r\n    {\r\n        id: 1,\r\n        name: \"barkov\",\r\n        url: \"./images/barkov.jpg\",\r\n        clicked: false\r\n    },\r\n    {\r\n        id: 2,\r\n        name: \"huberdeau\",\r\n        url: \"./images/huberdeau.jpg\",\r\n        clicked: false\r\n    },\r\n    {\r\n        id: 3,\r\n        name: \"trocheck\",\r\n        url: \"./images/trocheck.jpg\",\r\n        clicked: false\r\n    },\r\n    {\r\n        id: 4,\r\n        name: \"bobby\",\r\n        url: \"./images/bobby.jpg\",\r\n        clicked: false\r\n    },\r\n    {\r\n        id: 5,\r\n        name: \"dad\",\r\n        url: \"./images/dad.jpg\",\r\n        clicked: false\r\n    },\r\n    {\r\n        id: 6,\r\n        name: \"hoffman\",\r\n        url: \"./images/hoffman.jpg\",\r\n        clicked: false\r\n    },\r\n    {\r\n        id: 7,\r\n        name: \"ekblad\",\r\n        url: \"./images/ekblad.jpg\",\r\n        clicked: false\r\n    },\r\n    {\r\n        id: 8,\r\n        name: \"matheson\",\r\n        url: \"./images/matheson.jpg\",\r\n        clicked: false\r\n    },\r\n    {\r\n        id: 9,\r\n        name: \"tippett\",\r\n        url: \"./images/tippett.jpg\",\r\n        clicked: false\r\n    },\r\n    {\r\n        id: 10,\r\n        name: \"reimer\",\r\n        url: \"./images/reimer.jpg\",\r\n        clicked: false\r\n    },\r\n    {\r\n        id: 11,\r\n        name: \"weegar\",\r\n        url: \"./images/weegar.jpg\",\r\n        clicked: false\r\n    },\r\n    {\r\n        id: 12,\r\n        name: \"vatrano\",\r\n        url: \"./images/vatrano.jpg\",\r\n        clicked: false\r\n    }\r\n];\r\n\r\nexport default photos;","import React from \"react\";\r\nimport \"../style/navbar.css\"\r\n\r\n\r\nfunction NavBar () {\r\n    return (\r\n        <div className = \"container\">\r\n            <div className =\"navbar\">\r\n                <h2 className=\"navbar-brand\">Clicky Memory Game</h2>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n            </div>\r\n        </div>    \r\n    );\r\n}\r\n\r\nexport default NavBar;","import React from 'react';\r\n\r\nfunction ScoreBoard (props) {\r\n\r\n    return (\r\n        <div className = \"container\">\r\n            <div className =\"scoreBoard\">\r\n                <h4 className=\"currentScore\">Current Score: {props.currentScore}</h4>\r\n                <h4 className=\"newScore\">New Score: {props.newScore}</h4>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n            </div>\r\n        </div>    \r\n\r\n    );\r\n\r\n}\r\n\r\nexport default ScoreBoard;","import React, { Component } from \"react\";\r\nimport \"../style/picture.css\"\r\n\r\nclass Cards extends Component {\r\n\r\n    render () {\r\n        return (\r\n            <div className='card'>\r\n                <div className=\"img-container\">\r\n                    <div className=\"picture\" >\r\n                        <img alt={this.props.picture.name} src={this.props.picture.url} onClick={this.props.firstClick.bind(this, this.props.picture.id)}/>       \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n \r\nexport default Cards;","import React, { Component } from \"react\";\r\nimport Cards from \"./Cards\";\r\nimport \"../style/GameGrid.css\";\r\n\r\nclass GameRegion extends Component {\r\n\r\n    // firstClick = () => console.log(this);\r\n\r\n    render() {\r\n        return this.props.photos.map(picture => \r\n            <Cards picture={picture} key={picture.id} firstClick={this.props.firstClick}/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GameRegion;","import React, { Component } from \"react\";\r\nimport GameRegion from \"./GameRegion\";\r\nimport \"../style/GameGrid.css\";\r\n\r\nclass GamerGrid extends Component {\r\n    \r\n    // firstClick = () => console.log(this);\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"gamerGrid\">\r\n                <GameRegion photos={this.props.photos} firstClick={this.props.firstClick} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GamerGrid;","import React, { Component } from 'react';\nimport photos from './pictures';\nimport NavBar from \"./components/NavBar\";\nimport ScoreBoard from \"./components/ScoreBoard\";\n// import GridArea from './components/GameGrid';\nimport GamerGrid from \"./components/GamerGrid\";\nimport './App.css';\n\n\nclass App extends Component {\n  state = {\n    photos: photos,\n    currentScore: 0,\n    newScore: 0\n  }\n\n  // created method to handle the onclick events based on id\n  firstClick = (id) => {\n    // Setting state and mapping array\n    this.setState({photos: this.state.photos.sort(() => 0.5 - Math.random()).map(pic => {\n      // if id's are equal\n\n      if (id === pic.id) {\n        // This is when the game will be over\n        if(pic.clicked === true) {\n          // 1) sets state: new score is now equal to current score as long as new score is higher than current.\n          // 2) Reset current score back to 0\n          // 3) Maps over array again and sets the clicked props back to false.\n          // 4) Returns array\n          this.setState({newScore:this.state.currentScore > this.state.newScore ? this.state.currentScore:this.state.newScore, \n            currentScore: 0 , photos: this.state.photos.map(pic2 => {\n              pic2.clicked = false;\n              return pic2\n            })})\n        }else{\n          // This is where the game continues\n          this.setState({currentScore: this.state.currentScore + 1 })\n          pic.clicked = true;\n        }\n        \n      }\n      return pic    \n    }) })\n\n    \n\n    console.log(this.state.photos);\n  }\n  render() {\n    return (\n      <div className=\"LetTheGamesBegin\">\n        <NavBar />\n        <ScoreBoard currentScore={this.state.currentScore} newScore={this.state.newScore}/>\n        <GamerGrid photos={this.state.photos} firstClick={this.firstClick}/>\n    \n      </div>\n      \n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}